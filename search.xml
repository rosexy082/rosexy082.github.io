<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言基础</title>
    <url>/posts/9ec06885/</url>
    <content><![CDATA[<h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础</h1><p>c语言是<strong>结构化</strong>的程序设计——顺序结构，选择结构，循环结构</p>
<span id="more"></span>
<h2 id="一、C语言入门"><a href="#一、C语言入门" class="headerlink" title="一、C语言入门"></a>一、C语言入门</h2><h3 id="一、hello-world"><a href="#一、hello-world" class="headerlink" title="一、hello world"></a>一、hello world</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>程序从main函数开始执行，且只有一个</p>
</li>
<li><p>return 返回0,int是整型，然后返回一个整型0</p>
</li>
<li>print f 打印函数   \n换行</li>
<li><h1 id="include-包含一个名字叫stdio-h的文件"><a href="#include-包含一个名字叫stdio-h的文件" class="headerlink" title="include   包含一个名字叫stdio.h的文件"></a>include   包含一个名字叫stdio.h的文件</h1></li>
</ol>
<h3 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h3><p>char     字符  ‘ ‘   打印字符   %c打印字符格式</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>int 整型    %d</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age = <span class="number">20</span>;<span class="comment">//%d</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,age);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>%f—浮点型     %lf—double型   %p—-以地址打印    %x—-打印16进制</p>
<p>%c在C语言中代表字符型格式符</p>
<p>%s在C语言中代表字符串型格式符</p>
<h4 id="字符占用长度"><a href="#字符占用长度" class="headerlink" title="字符占用长度"></a><strong>字符占用长度</strong></h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th style="text-align:left">字节（8个比特位）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">2</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">long</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">long long</td>
<td style="text-align:left">8</td>
</tr>
<tr>
<td style="text-align:left">float</td>
<td style="text-align:left">4</td>
</tr>
<tr>
<td style="text-align:left">double</td>
<td style="text-align:left">8</td>
</tr>
</tbody>
</table>
</div>
<h3 id="三、键盘输入函数——-scanf"><a href="#三、键盘输入函数——-scanf" class="headerlink" title="三、键盘输入函数——-scanf()"></a>三、键盘输入函数——-scanf()</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从键盘输入求和</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入两个数\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;num,&amp;num1 );</span><br><span class="line">	sum = num + num1;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四、变量的作用域和生命周期"><a href="#四、变量的作用域和生命周期" class="headerlink" title="四、变量的作用域和生命周期"></a>四、变量的作用域和生命周期</h3><p>  <strong>作用域（scope）</strong>，程序设计概念，通常来说一段代码中所用到的名字并不是总是有效的，而限定这个名字的可用性的代码范围就是这个名字的作用域。</p>
<p><strong>生命周期</strong>，变量的生命周期是指变量的创建到变量销毁的一个时间段</p>
<h3 id="五、常量"><a href="#五、常量" class="headerlink" title="五、常量"></a>五、常量</h3><h4 id="1-字面常量"><a href="#1-字面常量" class="headerlink" title="1.字面常量"></a>1.字面常量</h4><ul>
<li>const修饰的常变量</li>
</ul>
<p>​            将变量转换为不可变的固定常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> num=<span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<p>​            相当于java的fianily</p>
<ul>
<li><h1 id="define定义的标识符常量"><a href="#define定义的标识符常量" class="headerlink" title="define定义的标识符常量"></a>define定义的标识符常量</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, MAX);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-枚举常量"><a href="#2-枚举常量" class="headerlink" title="2.枚举常量"></a>2.枚举常量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Sex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	MALE,</span><br><span class="line">	FEMALA,</span><br><span class="line">	SECRET</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//enum Sex s=MALE;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, MALE);<span class="comment">//0</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, FEMALA);<span class="comment">//1</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, SECRET);<span class="comment">//2</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-字符串的打印"><a href="#3-字符串的打印" class="headerlink" title="3.字符串的打印"></a>3.字符串的打印</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> arr1[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">	<span class="type">char</span> arr2[] = &#123; <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,arr1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arr2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>**  \0  表示字符串的结束符</p>
<p>1.strlen()—字符串统计函数  string length—计算字符串长度</p>
<p><img src="图/images/image-20230402145454188.png" alt></p>
<p>eg:arr2的abc后面放着一个随机值—直到0为止</p>
<h2 id="二、循环语句"><a href="#二、循环语句" class="headerlink" title="二、循环语句"></a>二、循环语句</h2><h4 id="1、if—else"><a href="#1、if—else" class="headerlink" title="1、if—else"></a>1、if—else</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> input = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;你要好好学习吗(1/0)&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;input);</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;要好好学习&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;不要&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (line &lt;= <span class="number">100</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;敲了一行代码%d\n&quot;</span>,line);</span><br><span class="line">		line++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;你已经是大牛啦&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> x , <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> z = x + y;</span><br><span class="line">	<span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">		<span class="type">int</span> num1= <span class="number">10</span>;</span><br><span class="line">		<span class="type">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">		<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">		<span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">		sum = Add(num1, num2);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;结果是%d&quot;</span>, sum);</span><br><span class="line">		sum = Add(a, b);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;sun = %d\n&quot;</span>, sum);</span><br><span class="line">       <span class="comment">//用户输入</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;c,%d)</span><br><span class="line">        <span class="type">int</span> sum=Add(c,d)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sun)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>add()自定义函数</p>
<h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><p>int arr[10]={1,2,3,4,5}</p>
<p>打印数组所有元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%D&quot;</span>,arr[i]);</span><br><span class="line">    i=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、异或非"><a href="#五、异或非" class="headerlink" title="五、异或非"></a>五、异或非</h2><p><strong>^</strong>  异或：对应的二进制相同则为0，相异则为1</p>
<p><strong>给你们句口诀与：全一则一 或：有一则一 异或：有一则一全一则零</strong></p>
<h2 id="六、常见关键字"><a href="#六、常见关键字" class="headerlink" title="六、常见关键字"></a>六、常见关键字</h2><p><img src="/posts/9ec06885/image-20230523100459368-1684807509870-1.png" alt="image-20230523100459368"></p>
<h3 id="typedef关键字"><a href="#typedef关键字" class="headerlink" title="typedef关键字"></a>typedef关键字</h3><p>typedef:类型定义，这里理解为类型重命名</p>
<p>例:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> unit;</span><br><span class="line"><span class="type">int</span> main</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num =<span class="number">0</span>;</span><br><span class="line">uint num1=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><p>用来修饰变量和函数的</p>
<p>1.修饰局部变量-称为静态局部变量</p>
<p>2.修饰全局变量-称为静态全局变量 </p>
<p>3.修饰函数-称为静态函数</p>
<p>①</p>
<p><img src="/posts/9ec06885/image-20230523103200606.png" alt="image-20230523103200606"></p>
<p>修饰局部变量时改变了变量存储位置，修饰全局变量时这个属性变成内部链接属性，其他源文件不能使用</p>
<h3 id="register关键字—寄存器"><a href="#register关键字—寄存器" class="headerlink" title="register关键字—寄存器"></a>register关键字—寄存器</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> num=<span class="number">3</span><span class="comment">//register建议3存放在寄存器中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="define—定义常量和宏"><a href="#define—定义常量和宏" class="headerlink" title="define—定义常量和宏"></a>define—定义常量和宏</h3><p><strong>宏</strong>是有参数的—宏是完成替换的</p>
<h1 id="define-ADD-x-y-（x-y）【无类型的】"><a href="#define-ADD-x-y-（x-y）【无类型的】" class="headerlink" title="define ADD(x,y) （x+y）【无类型的】"></a>define ADD(x,y) （x+y）【无类型的】</h1><p>​             宏名 宏参数 宏体</p>
<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7.指针"></a>7.指针</h2><p><img src="/posts/9ec06885/image-20240313205843838.png" alt="image-20240313205843838"></p>
<h3 id="1-内存"><a href="#1-内存" class="headerlink" title="1.内存"></a>1.内存</h3><p>内存是电脑上特别重要的存储器，计算机中程序的运行都是在内存中进行的。<br>所以为了有效的使用内存，就把内存划分成一个个小的内存单元，每个内存单元的大小是1个字节。为了能够有效的访问到内存的每个单元，就给内存单元进行了编号，这些编号被称为该内存单元的地址。</p>
<p><img src="/posts/9ec06885/image-20240309184905328.png" alt="image-20240309184905328"></p>
<p>指针就是地址——使用指针就是使用地址</p>
<p>指针的大小是相同的</p>
<p>指针需要多大空间，取决于地址的存储需要多大空间</p>
<h3 id="2-指针是什么？"><a href="#2-指针是什么？" class="headerlink" title="2.指针是什么？"></a>2.指针是什么？</h3><p>在计算机科学中，指针( Pointer )是编程语言中的一个对象，利用地址，它的值直接指向( points to )存在电脑存储器中另一个地方的值。由于通过地址能找到所需的变量单元，可以说，地址指向该变量单元。因此，将地址形象化的称为“指针”。意思是通过它能找到以它为地址的内存单元。</p>
<p>&amp;a取到的地址是a四个字节的第一个字节</p>
<p>存放地址的变量叫指针变量</p>
<p>指针在32位平台为4个字节，64位为8个字节</p>
<p>%p—-打印地址</p>
<h3 id="3-指针和指针类型"><a href="#3-指针和指针类型" class="headerlink" title="3.指针和指针类型"></a>3.指针和指针类型</h3><ol>
<li><p>指针类型决定了：指针解引用的权限有多大</p>
</li>
<li><p>指针类型决定了，指针走一步能走多远（步长）</p>
</li>
<li><p>int+4,char+1,double+8字节</p>
</li>
</ol>
<h3 id="4-野指针"><a href="#4-野指针" class="headerlink" title="4.野指针"></a>4.野指针</h3><p>野指针是指指向位置是不可知的（随机的，不正确的，没有明确限制的）</p>
<ol>
<li><h4 id="指针未初始化"><a href="#指针未初始化" class="headerlink" title="指针未初始化 "></a>指针未初始化 <img src="/posts/9ec06885/image-20240310161410537.png" alt="image-20240310161410537"></h4></li>
</ol>
<h4 id="2-越界访问"><a href="#2-越界访问" class="headerlink" title="2.越界访问"></a>2.越界访问</h4><p><img src="/posts/9ec06885/image-20240310161842007.png" alt="image-20240310161842007"></p>
<h4 id="3-指针指向的空间释放"><a href="#3-指针指向的空间释放" class="headerlink" title="3.指针指向的空间释放"></a>3.指针指向的空间释放</h4><h3 id="5-如何规避野指针"><a href="#5-如何规避野指针" class="headerlink" title="5.如何规避野指针"></a>5.如何规避野指针</h3><ol>
<li>指针初始化</li>
<li>小心指针越界</li>
<li>指针指向空间释放即使置NULL</li>
<li>指针使用之前检查有效性</li>
</ol>
<h3 id="6-指针的运算"><a href="#6-指针的运算" class="headerlink" title="6.指针的运算"></a>6.指针的运算</h3><ul>
<li><h4 id="指针-整数"><a href="#指针-整数" class="headerlink" title="指针+-整数"></a>指针+-整数</h4><p><img src="/posts/9ec06885/image-20240310165229404.png" alt="image-20240310165229404"></p>
</li>
<li><h4 id="指针-指针"><a href="#指针-指针" class="headerlink" title="指针-指针"></a>指针-指针</h4><p><img src="/posts/9ec06885/image-20240310165527969.png" alt="image-20240310165527969"></p>
<h4 id="指针-指针得到的是指针之间元素的个数"><a href="#指针-指针得到的是指针之间元素的个数" class="headerlink" title="指针-指针得到的是指针之间元素的个数"></a><strong>指针-指针得到的是指针之间元素的个数</strong></h4></li>
</ul>
<p>​      <img src="/posts/9ec06885/image-20240310172326316.png" alt="image-20240310172326316"></p>
<ul>
<li><h4 id="指针的关系运算"><a href="#指针的关系运算" class="headerlink" title="指针的关系运算"></a>指针的关系运算</h4></li>
</ul>
<p><img src="/posts/9ec06885/image-20240310173749434.png" alt="image-20240310173749434"></p>
<h3 id="7-指针与数组"><a href="#7-指针与数组" class="headerlink" title="7.指针与数组"></a>7.指针与数组</h3><p>数组名是数组首元素的地址</p>
<h3 id="8-二级指针"><a href="#8-二级指针" class="headerlink" title="8.二级指针**"></a>8.二级指针**</h3><h3 id="9-指针数组"><a href="#9-指针数组" class="headerlink" title="9.指针数组"></a>9.指针数组</h3><p>存放指针的数组—-int* p[5];//整型指针的数组</p>
<p><img src="/posts/9ec06885/image-20240311164918262.png" alt="image-20240311164918262"></p>
<p>结论:指针数组是一个数组,每个数组元素存放一个指针变量</p>
<h3 id="10-数组指针"><a href="#10-数组指针" class="headerlink" title="10.数组指针"></a>10.数组指针</h3><p>int (*p)[5];</p>
<p><img src="/posts/9ec06885/image-20240311165726371.png" alt="image-20240311165726371"></p>
<p>结论:数组指针是一个指针,它指向的是一个数组</p>
<p><img src="/posts/9ec06885/image-20240311170512924.png" alt="image-20240311170512924"></p>
<h3 id="11-解引用"><a href="#11-解引用" class="headerlink" title="11.解引用"></a>11.解引用</h3><p>在一个地址前面加上取值运算符“*”，即把一个地址取出来，这种操作就叫解引用</p>
<h3 id="12-二维指针数组"><a href="#12-二维指针数组" class="headerlink" title="12.二维指针数组"></a>12.二维指针数组</h3><p><img src="/posts/9ec06885/image-20240312134439175.png" alt="image-20240312134439175"></p>
<p><img src="/posts/9ec06885/image-20240312134600152.png" alt="image-20240312134600152"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//二维数组解引用</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">4</span>][<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            arr[i][j]=k++;<span class="comment">//将数组自动赋值</span></span><br><span class="line">        <span class="comment">//    printf(&quot;%d\n&quot;,arr[i][j]);//打印</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(arr+1):%p\n&quot;</span>,*(arr+<span class="number">1</span>));<span class="comment">//打印二维数组第二行首个地址值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1]:%p\n&quot;</span>,arr[<span class="number">1</span>]);<span class="comment">//打印二维数组首个地址值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;arr[1][0]:%p\n&quot;</span>,&amp;arr[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//取出第二行第0个地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(arr+1):%d\n&quot;</span>,**(arr+<span class="number">1</span>));<span class="comment">//取出第二行第一个数组值--打开第二行第一个数组盒子</span></span><br><span class="line">    <span class="comment">//&amp;是取地址，*取值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*(*(arr+1)+3):%d\n&quot;</span>,**(arr+<span class="number">1</span>)+<span class="number">3</span>);<span class="comment">//将打印二维数组第二行首个地址值+3--然后打开这个盒子</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1][3]:%d\n&quot;</span>,arr[<span class="number">1</span>][<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="13-数组指针和二维数组"><a href="#13-数组指针和二维数组" class="headerlink" title="13.数组指针和二维数组"></a>13.数组指针和二维数组</h3><p><img src="/posts/9ec06885/image-20240312140103106.png" alt="image-20240312140103106"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,&#125;&#125;;</span><br><span class="line">    <span class="type">int</span> (*p)[<span class="number">3</span>]=arr;<span class="comment">//*P的位置是一个空，相当于[][3],将arr赋给他时*p就变成2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(p+1):%d\n&quot;</span>,**(p+<span class="number">1</span>));<span class="comment">//p+1相当于跳到第二行，*p+1相当于第二行的地址，**p+1相当于取第一位的值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(arr+1):%d\n&quot;</span>,**(arr+<span class="number">1</span>));<span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1][0]:%d\n&quot;</span>,arr[<span class="number">1</span>][<span class="number">0</span>]);<span class="comment">//打印第二行第一个</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(p+1):%d\n&quot;</span>,*(*(p+<span class="number">1</span>)+<span class="number">2</span>));<span class="comment">//右移动2</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;**(arr+1):%d\n&quot;</span>,**(arr+<span class="number">1</span>)+<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arr[1][0]:%d\n&quot;</span>,arr[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="14-void指针—无类型指针"><a href="#14-void指针—无类型指针" class="headerlink" title="14. void指针—无类型指针"></a>14. void指针—无类型指针</h3><p>void指针我们把它称之为通用指针,就是可以指向任意类型的数据。也就是说，任何类型的指针都可以赋值给void指针。</p>
<p><img src="/posts/9ec06885/image-20240312160924732.png" alt="image-20240312160924732"></p>
<h3 id="15-null指针—如果一个指针不指向任何一个数据就是空指针"><a href="#15-null指针—如果一个指针不指向任何一个数据就是空指针" class="headerlink" title="15. null指针—如果一个指针不指向任何一个数据就是空指针"></a>15. null指针—如果一个指针不指向任何一个数据就是空指针</h3><p>当你还不清楚要将指针初始化为什么地址时，请将它初始化NULL;在对指针进行解引用时，先检查该指针是否为NULL。这种策略可以为你今后编写大型程序节省大量的调试时间。</p>
<h3 id="16-指向指针的指针（二级指针-—"><a href="#16-指向指针的指针（二级指针-—" class="headerlink" title="16. 指向指针的指针（二级指针)—**"></a>16. 指向指针的指针（二级指针)—**</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> *p=&amp;a;</span><br><span class="line"><span class="type">int</span> **pp=&amp;p;</span><br><span class="line">pr(a)</span><br><span class="line">pr(*P)</span><br><span class="line">pr(**P)</span><br></pre></td></tr></table></figure>
<h3 id="17-指向指针的指针和指针数组"><a href="#17-指向指针的指针和指针数组" class="headerlink" title="17. 指向指针的指针和指针数组"></a>17. 指向指针的指针和指针数组</h3><ul>
<li><p>避免重复分配内存</p>
</li>
<li><p>只需要进行一次修改</p>
<p><img src="/posts/9ec06885/image-20240312171433063.png" alt="image-20240312171433063"></p>
</li>
</ul>
<h3 id="18-数组指针和二维数组"><a href="#18-数组指针和二维数组" class="headerlink" title="18.数组指针和二维数组"></a>18.数组指针和二维数组</h3><p>  <img src="/posts/9ec06885/image-20240312172653097.png" alt="image-20240312172653097"></p>
<p>将array的首地址交给p，p+1就跳到了第二列</p>
<p><img src="/posts/9ec06885/image-20240312173043329.png" alt="image-20240312173043329"></p>
<p><img src="/posts/9ec06885/image-20240312173750488.png" alt="image-20240312173750488"></p>
<h3 id="19-常量与指针"><a href="#19-常量与指针" class="headerlink" title="19.常量与指针"></a>19.常量与指针</h3><p>const关键字可将变量变成只读</p>
<ul>
<li>指针可以修改为指向不同的常量</li>
<li>指针可以修改为指向不同的变量</li>
<li>可以通过解引用来读取指针指向的数据</li>
<li>不可以通过解引用修改指针指向的数据</li>
</ul>
<h4 id="1-常量指针"><a href="#1-常量指针" class="headerlink" title="1.常量指针"></a>1.<strong>常量指针</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *<span class="type">const</span> p = &amp;num;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>指向非常量的常量指针</p>
<p>——指针自身不可以被修改-</p>
<p>——指针指向的值可以被修改</p>
</li>
<li><p>指向常量的常量指针</p>
<p>一指针自身不可以被修改</p>
<p>一指针指向的值也不可以被修鸡</p>
</li>
</ul>
<p>const接近哪个哪个就不可以改变</p>
<p><img src="/posts/9ec06885/image-20240312181447885.png" alt="image-20240312181447885"></p>
<p><strong>指针指代的是常量</strong></p>
<h4 id="2-指向常量的常量指针"><a href="#2-指向常量的常量指针" class="headerlink" title="2.指向常量的常量指针"></a><strong>2.指向常量的常量指针</strong></h4><p><img src="/posts/9ec06885/image-20240312181504410.png" alt="image-20240312181504410"></p>
<p><img src="/posts/9ec06885/image-20240312181856194.png" alt="image-20240312181856194"></p>
<h3 id="20、malloc函数用法—"><a href="#20、malloc函数用法—" class="headerlink" title="20、malloc函数用法—-"></a>20、malloc函数用法—-</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 动态数组---malloc函数</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fo</span><span class="params">(<span class="type">int</span> *q)</span></span><br><span class="line">&#123;</span><br><span class="line">    *q=<span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//    int * p=(int *) malloc(4);</span></span><br><span class="line"><span class="comment">//    /*</span></span><br><span class="line"><span class="comment">//     * #include &lt;malloc.h&gt;必须加</span></span><br><span class="line"><span class="comment">//     * 4表示请求系统为本程序分配4个字节</span></span><br><span class="line"><span class="comment">//     * Malloc函数只有一个形参，并且为整型</span></span><br><span class="line"><span class="comment">//     * malloc函数只能返回第一个字节的地址</span></span><br><span class="line"><span class="comment">//     *这里分配了8个字节，地址占4个，整型占4个</span></span><br><span class="line"><span class="comment">//     * p是静态分配了4个字节，malloc是动态请求了4个字节</span></span><br><span class="line"><span class="comment">//     * fee(p)代表将p指向的内存给释放掉，但是p没有释放，只能等程序结束由其系统释放</span></span><br><span class="line"><span class="comment">//     *</span></span><br><span class="line"><span class="comment">//     */</span></span><br><span class="line"><span class="comment">//    *p=4;//*p代表的是一个int变量</span></span><br><span class="line"><span class="comment">//    free(p);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p =(<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>));</span><br><span class="line">     *p=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"></span><br><span class="line">    fo(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><p>类型名  函数名(参数列表)</p>
<p>{</p>
<p>​        函数体</p>
<p>}</p>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a><strong>作用</strong>：</h3><ol>
<li>​    避免了重复性操作</li>
<li>​    有利于程序的模块化</li>
</ol>
<h6 id="1、函数声明"><a href="#1、函数声明" class="headerlink" title="1、函数声明"></a>1、函数声明</h6><p><img src="/posts/9ec06885/image-20240312182939425.png" alt="image-20240312182939425"></p>
<p>函数小案例1——控制台输入求1+2+3+…(n-1)+n的和</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//函数之初体验---控制台输入求1+2+3+...(n-1)+n的和</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sun</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=a;i++)&#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="type">int</span> a,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">     sum= sun(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数小案例2———</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)&#123;</span><br><span class="line">        temp=a;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        temp =b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b,temp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    temp= max(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最大值是：%d&quot;</span>,temp);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、参数和返回值"><a href="#2、参数和返回值" class="headerlink" title="2、参数和返回值"></a>2、参数和返回值</h3><p><strong>形参</strong>：形式参数—函数定义时写的参数</p>
<p><strong>实参</strong>：实际参数—函数调用时传的实际值</p>
<p><strong>传值</strong>： </p>
<p><strong>传址</strong>：</p>
<p><strong>可变参数</strong>——#include <stdarg.h></stdarg.h></p>
<h3 id="3、指针函数"><a href="#3、指针函数" class="headerlink" title="3、指针函数"></a>3、指针函数</h3><p>用指针变量作为函数的返回值，就是指针函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 指针函数--用户输入给东西</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">fluth</span><span class="params">(<span class="type">char</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:<span class="keyword">return</span> <span class="string">&quot;鼠标&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:<span class="keyword">return</span> <span class="string">&quot;鼠标1&quot;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:<span class="keyword">return</span> <span class="string">&quot;鼠标2&quot;</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> <span class="string">&quot;狗屁&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> input;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个字母：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;input);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, fluth(input));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="4、函数指针—指向函数的指针"><a href="#4、函数指针—指向函数的指针" class="headerlink" title="4、函数指针—指向函数的指针"></a>4、函数指针—指向函数的指针</h6><p><img src="/posts/9ec06885/image-20240313141438459.png" alt="image-20240313141438459"></p>
<p><img src="/posts/9ec06885/image-20240313142022453.png" alt="image-20240313142022453"></p>
<p>等价</p>
<p><img src="/posts/9ec06885/image-20240313142059456.png" alt="image-20240313142059456"></p>
<h6 id="5、函数指针作为参数"><a href="#5、函数指针作为参数" class="headerlink" title="5、函数指针作为参数"></a>5、函数指针作为参数</h6><p><img src="/posts/9ec06885/image-20240313143044874.png" alt="image-20240313143044874"></p>
<h6 id><a href="#" class="headerlink" title=" "></a> </h6><h2 id="九、结构体"><a href="#九、结构体" class="headerlink" title="九、结构体"></a>九、结构体</h2><h3 id="struct关键字"><a href="#struct关键字" class="headerlink" title="struct关键字"></a><strong>struct关键字</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 结构体---struct</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">float</span> socre;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st</span>=</span>&#123;<span class="number">21</span>,<span class="number">59.9</span>,<span class="string">&#x27;m&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2 f %c\n&quot;</span>,st.age,st.socre,st.sex );</span><br><span class="line"><span class="comment">//赋值读取</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st2</span>;</span></span><br><span class="line">    st2.age=<span class="number">20</span>;</span><br><span class="line">    st2.socre=<span class="number">60</span>;</span><br><span class="line">    st2.sex=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2f %c\n&quot;</span>,st2.sex,st2.socre,st2.sex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过指针读取</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">Student</span> *<span class="title">pst</span>=</span>&amp;st;</span><br><span class="line">    pst -&gt;age=<span class="number">88</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,pst-&gt;age);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//pst-&gt;age 在计算机内部会被转化成(*pst).age</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>指针变量名-&gt;成员名﹐在计算机内部会被转化成(*指针变量名).成员名的方式来执行</p>
<p>pst -&gt; age 含义： pst所指向的那个结构体变量中的age成员</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 结构体---struct</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> socre;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st</span>=</span>&#123;<span class="number">21</span>,<span class="number">59.9</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&quot;小李&quot;</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2lf %c %s\n&quot;</span>,st.age,st.socre,st.sex ,st.name);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">st2</span>;</span></span><br><span class="line">    st2.age=<span class="number">20</span>;</span><br><span class="line">    st2.socre=<span class="number">60</span>;</span><br><span class="line">    st2.sex=<span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(st2.name,<span class="string">&quot;小米&quot;</span>);<span class="comment">//字符串修改</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %.2lf %c %s\n&quot;</span>,st2.sex,st2.socre,st2.sex,st2.name);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span>  <span class="title">Student</span> *<span class="title">pst</span>=</span>&amp;st;</span><br><span class="line">    pst -&gt;age=<span class="number">88</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s\n&quot;</span>,pst-&gt;age,pst-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小案例1—冒泡排序"><a href="#小案例1—冒泡排序" class="headerlink" title="小案例1—冒泡排序"></a>小案例1—冒泡排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">               t=a[j];</span><br><span class="line">               a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">               a[j+<span class="number">1</span>]=t;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">6</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">    sort(a,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小案例二—用户输入成绩并排序"><a href="#小案例二—用户输入成绩并排序" class="headerlink" title="小案例二—用户输入成绩并排序"></a>小案例二—用户输入成绩并排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 动态构造存放学生信息的结构体数组</span></span><br><span class="line"><span class="comment">//   存放学生信息，然后按分数排序输出</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> *<span class="title">parr</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入学生人数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;len);</span><br><span class="line">    parr=(<span class="keyword">struct</span> Student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Student)*len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个学生信息:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age=:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;parr[i].age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;score=:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;parr[i].score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name=:&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,parr[i].name);<span class="comment">//name本身就是数组类型的，已经有了首地址值，所以不用加&amp;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">t</span>;</span></span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(parr[j].score &gt; parr[j+<span class="number">1</span>].score)&#123;</span><br><span class="line">                t=parr[j];</span><br><span class="line">                parr[j]=parr[j+<span class="number">1</span>];</span><br><span class="line">                parr[j+<span class="number">1</span>]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请第%d个学生信息:&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;age=:%d\n&quot;</span>,parr[i].age);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;score=:%d\n&quot;</span>,parr[i].score);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name=:%s\n&quot;</span>,parr[i].name);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="十、枚举—enum"><a href="#十、枚举—enum" class="headerlink" title="十、枚举—enum"></a>十、枚举—enum</h2><p>把一个事物的说有可能的取值都一一陈列出来</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">weekDay</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="keyword">enum</span> weekDay i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Monday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Tuesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Wednesday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Thursday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Friday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Saturday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Sunday\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    f(Friday);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码更安全，</p>
<h2 id="十一、进制"><a href="#十一、进制" class="headerlink" title="十一、进制"></a>十一、进制</h2><p><strong>注意余数要倒序排序</strong></p>
<p>八进制前面要加0，最大是7</p>
<p>十六进制前面要加0 X，最大0-9，a-f </p>
<p>在汇编中:在数字后加字母B表示二进制数，加字母О表示八进制数，加字母D表示十进制数，加字母H表示十六进制数。</p>
<p><img src="/posts/9ec06885/image-20240317164814772.png" alt="image-20240317164814772"></p>
<p> 进制转换——以15为例子</p>
<p><strong>2进制</strong>                                          1111</p>
<p>15%2商7余1                           1<em>2的3次方+1 </em>2的2次方+1 <em>1的1次方+1 </em>1的0次方=15</p>
<p>7%2商3余1</p>
<p>3%2商1余1</p>
<p>还余1</p>
<p>因此为1111</p>
<p><strong>8进制</strong>                                               17</p>
<p>15%8商1余7</p>
<p>因此为17                                       1*8+7</p>
<p><img src="/posts/9ec06885/image-20240317170620392.png" alt="image-20240317170620392"></p>
<p><img src="/posts/9ec06885/image-20240317170758864.png" alt="image-20240317170758864"></p>
<p><img src="/posts/9ec06885/image-20240317171116638.png" alt="image-20240317171116638"></p>
<p>%#X—打印16</p>
<p><img src="/posts/9ec06885/image-20240317172306481.png" alt="image-20240317172306481"></p>
<p><img src="/posts/9ec06885/image-20240317172350602.png" alt="image-20240317172350602"></p>
<p><img src="/posts/9ec06885/image-20240317172439413.png" alt="image-20240317172439413"></p>
<h2 id="十二、补码"><a href="#十二、补码" class="headerlink" title="十二、补码"></a>十二、补码</h2><h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><ul>
<li>​         也叫符号-绝对值码</li>
<li>​        最高位0表示正1表示负，其余二进制位是该数字的绝对值的二进制位</li>
</ul>
<p>​       <strong>例如</strong>：5</p>
<p>​       的二进制是101—1表示负数   因此源码是1101</p>
<ul>
<li>原码简单易懂加减运算复杂</li>
<li>存在加减乘除四种运算，</li>
<li>增加了CPU的复杂度</li>
<li>零的表示不唯一</li>
</ul>
<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>不用</p>
<h3 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h3><ul>
<li>表示数值平移n位，n称为移码量</li>
<li>移码主要用于浮点数的阶码的存储</li>
</ul>
<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><ul>
<li><strong>十进制转二进制</strong> </li>
</ul>
<p>  ​       <em>正整数转二进制</em></p>
<p>  ​                 除2取余，直到商位0，余数倒叙排序</p>
<p>  ​      <em>负整数转二进制</em></p>
<p>  ​                  先求与该负数相对应的正整数二进制的,然后将所有位取反，末尾加1，不够位数时，左边补1</p>
<p>  ​                例如：-3</p>
<p>  ​                3的二进制011，取反变成100，然后末尾加1变成 101—-》11111101</p>
<ul>
<li><p><strong>零转二进制</strong></p>
<p>​       全是0</p>
</li>
<li><p><strong>二进制转十进制</strong></p>
<p>​     如果首位是0，则表明是正整数，按普通方法</p>
<p>​     如果首位是1，则表明是复数</p>
<p>​              将所有位取反，末尾加1，所得的数字就是该复数的绝对值    前面全补1 </p>
</li>
</ul>
<h2 id="十三、位运算符"><a href="#十三、位运算符" class="headerlink" title="十三、位运算符"></a>十三、位运算符</h2><h3 id="amp-—按位与"><a href="#amp-—按位与" class="headerlink" title="&amp;—按位与"></a>&amp;—按位与</h3><p>​     &amp;&amp; 逻辑与 也叫并且（左边有右边是否相等-真1或假0）</p>
<p>​     &amp;将两个二进制进行一个相与</p>
<ul>
<li><p>​    1&amp;1=1</p>
</li>
<li><p>​    1&amp;0=0</p>
</li>
<li><p>0&amp;1=0</p>
</li>
<li><p>0&amp;0=0</p>
</li>
<li><p>eg: 5&amp;7=5    21&amp;7=5</p>
</li>
</ul>
<h3 id="—-按位或"><a href="#—-按位或" class="headerlink" title="|—-按位或"></a>|—-按位或</h3><p>​       ||逻辑与</p>
<p>​        |按位或     </p>
<ul>
<li>​    1&amp;1=1</li>
<li>​    1&amp;0=1</li>
<li>0&amp;1=1</li>
<li>0&amp;0=0</li>
</ul>
<h3 id="按位取反"><a href="#按位取反" class="headerlink" title="~   按位取反"></a>~   按位取反</h3><p>   就是把变量按二进制取反</p>
<h3 id="按位异或"><a href="#按位异或" class="headerlink" title="^  按位异或"></a>^  按位异或</h3><p>相同为0，不同为1</p>
<ul>
<li>​    1^0=1</li>
<li>​    0^1=1</li>
<li>1^1=0</li>
<li>0^0=0</li>
</ul>
<h3 id="lt-lt-按位左移"><a href="#lt-lt-按位左移" class="headerlink" title="&lt;&lt;    按位左移"></a>&lt;&lt;    按位左移</h3><p>​       i&lt;&lt;1    表示把i的所有二进制左移一位</p>
<p>​      左移n位相当于乘以2的n次方</p>
<p><img src="/posts/9ec06885/image-20240318171945054.png" alt="image-20240318171945054"></p>
<p>​      答案下面的快，</p>
<h3 id="gt-gt-按位右移"><a href="#gt-gt-按位右移" class="headerlink" title="&gt;&gt;  按位右移"></a>&gt;&gt;  按位右移</h3><p>​       i&gt;&gt;3    表示把i的所有二进制左移3位,左边一般都为0</p>
<p>​      右移n位相当于除以2的n次方</p>
<p>通过位运算符我们可以对数据精确到每一位</p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣</title>
    <url>/posts/6ead9846/</url>
    <content><![CDATA[<h2 id="力扣之初体验"><a href="#力扣之初体验" class="headerlink" title="力扣之初体验"></a>力扣之初体验</h2><span id="more"></span>
<h5 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h5><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p>
<p>你可以按任意顺序返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1] </span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>2 &lt;= nums.length &lt;= 104</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
<li><strong>只会存在一个有效答案</strong></li>
</ul>
<p><strong>进阶：</strong>你可以想出一个时间复杂度小于 <code>O(n2)</code> 的算法吗？</p>
<h6 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span> {</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numsSize; i++) {</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; numsSize; j++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) {</span><br><span class="line">                <span class="type">int</span> *arr = (<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * <span class="number">2</span>);</span><br><span class="line">                arr[<span class="number">0</span>] = i;</span><br><span class="line">                arr[<span class="number">1</span>] = j;</span><br><span class="line">                *returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 考虑不存在的情况，但本题中不会出现</span></span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>这里为暴力循环，第一层先遍历i，然后遍历j当找到相同时创建一个新数组</p>
<h5 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h5><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>
<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>
<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li>
<li><code>0 &lt;= Node.val &lt;= 9</code></li>
<li>题目数据保证列表表示的数字不含前导零</li>
</ul>
<h6 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     struct ListNode *next;</span></span><br><span class="line"><span class="comment"> * };</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> ListNode* <span class="title function_">addTwoNumbers</span><span class="params">(<span class="keyword">struct</span> ListNode* l1, <span class="keyword">struct</span> ListNode* l2)</span> {</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">newNode</span> =</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>* <span class="title">head</span> =</span><span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,carry=<span class="number">0</span>;<span class="comment">//进位</span></span><br><span class="line">    <span class="keyword">while</span>(l1 || l2)</span><br><span class="line">    {</span><br><span class="line">      <span class="type">int</span> a= l1 ? l1-&gt;val:<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> b= l2 ? l2-&gt;val:<span class="number">0</span>;</span><br><span class="line">      sum =a+b+carry;</span><br><span class="line">      <span class="keyword">if</span>(!head)</span><br><span class="line">      {</span><br><span class="line">        head =newNode =(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        newNode -&gt;val=sum%<span class="number">10</span>;</span><br><span class="line">        newNode -&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">      }<span class="keyword">else</span></span><br><span class="line">      {</span><br><span class="line">        newNode -&gt;next=(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">        newNode-&gt;next-&gt;val=sum%<span class="number">10</span>;</span><br><span class="line">        newNode=newNode-&gt;next;</span><br><span class="line">        newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">      }</span><br><span class="line">      carry=sum/<span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span>(l1)</span><br><span class="line">      {</span><br><span class="line">        l1=l1-&gt;next;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span>(l2)</span><br><span class="line">      {</span><br><span class="line">        l2=l2-&gt;next;</span><br><span class="line">      }</span><br><span class="line">     }</span><br><span class="line">    <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)</span><br><span class="line">     {</span><br><span class="line">      newNode-&gt;next =(<span class="keyword">struct</span> ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ListNode));</span><br><span class="line">      newNode-&gt;next-&gt;val=carry;</span><br><span class="line">      newNode= newNode-&gt;next;</span><br><span class="line">      newNode-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h5><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong>的长度。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "abcabcbb"</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "bbbbb"</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: s = "pwwkew"</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<h6 id="题解-滑动窗口解决"><a href="#题解-滑动窗口解决" class="headerlink" title="题解-滑动窗口解决"></a>题解-滑动窗口解决</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(<span class="type">char</span>* s)</span> {</span><br><span class="line">    <span class="type">int</span> i,len=<span class="number">0</span>,max=<span class="number">0</span>,start=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> index[<span class="number">255</span>]={<span class="number">0</span>};</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;s[i]!=<span class="string">'\0'</span>;i++)</span><br><span class="line">    {</span><br><span class="line">       <span class="keyword">if</span>(index[s[i]]&gt;start)<span class="comment">//如果不是第一次出现</span></span><br><span class="line">       {</span><br><span class="line">        len=i-start;</span><br><span class="line">        start=index[s[i]];</span><br><span class="line">        <span class="keyword">if</span>(len&gt;max)</span><br><span class="line">        {</span><br><span class="line">            max=len;</span><br><span class="line">        }</span><br><span class="line">       }</span><br><span class="line">       index[s[i]]=i+<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">if</span>(len-start&gt;max){</span><br><span class="line">        <span class="keyword">return</span> len-start;</span><br><span class="line">    }<span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>个人理解：</p>
<ol>
<li>首先定义了一个空数组，255个字节代表255的char类型</li>
<li>进入for循环，这里我们以pwwkew为例</li>
<li>首先index[s[i]]代表index的第多少元素位置，例如p的阿史克马的位置</li>
<li>p第一次出现，p的位置为0，不大于0，不会进入循环，然后将index[s[0]]的位置改为p的实际位置 1</li>
<li>同理，w位置为2，此时i为1</li>
<li>w，进入循环，Len =2-0=2；start=2(因为此时未执行到index[s[i]]=i+1;所以start还是上一次的值），max=2;</li>
<li>……</li>
<li>w时，Len=5-3=3；start=2,max=3</li>
</ol>
]]></content>
      <categories>
        <category>力扣</category>
      </categories>
      <tags>
        <tag>力扣刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言数据结构</title>
    <url>/posts/18d54854/</url>
    <content><![CDATA[<h1 id="C语言—数据结构"><a href="#C语言—数据结构" class="headerlink" title="C语言—数据结构"></a>C语言—数据结构</h1><p>———————————————————-内容参考《郝斌数据结构》，《王道》《王卓》</p>
<span id="more"></span>
<h2 id="一、数据结构之基础"><a href="#一、数据结构之基础" class="headerlink" title="一、数据结构之基础"></a>一、数据结构之基础</h2><h3 id="1-数据结构的三要素"><a href="#1-数据结构的三要素" class="headerlink" title="1.数据结构的三要素"></a>1.数据结构的三要素</h3><p><img src="/posts/18d54854/image-20240911162821303.png" alt="image-20240911162821303"></p>
<p>1.若采用顺序存储，则各个数据元素在物理上必须是连续的;若采用非顺序存储，则各个数据元素在物理上可以是离散的。<br>2.数据的存储结构会影响存储空间分配的方便程度<br>3数椐的存储结构会影响对数据运算的速度</p>
<p><img src="/posts/18d54854/image-20241009153911315.png" alt="image-20241009153911315"></p>
<h4 id="数据的存储结构有几种"><a href="#数据的存储结构有几种" class="headerlink" title="数据的存储结构有几种"></a><strong>数据的存储结构有几种</strong></h4><p>​    线性</p>
<p>​          连续存储（数组）</p>
<p>​                   优点：存储速度很快</p>
<p>​                   缺点：插入和删除元素很慢，空间通常是有限的</p>
<p>​           离散存储（链表）</p>
<p>​                    优点：空间没有限制，插入删除元素很快</p>
<p>​                    缺点：存取速度很慢</p>
<h3 id="2、存储结构"><a href="#2、存储结构" class="headerlink" title="2、存储结构"></a>2、存储结构</h3><p><img src="/posts/18d54854/image-20240911163008131.png" alt="image-20240911163008131"></p>
<h4 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h4><p>顺序存储,把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p>
<h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><p>链式存储，逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。（指针链接指针）</p>
<h4 id="索引存储"><a href="#索引存储" class="headerlink" title="索引存储"></a>索引存储</h4><p>索引存储。在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字，地址)离散的</p>
<h4 id="散列存储"><a href="#散列存储" class="headerlink" title="散列存储"></a>散列存储</h4><p>散列存储。根据元素的夭键字直接计算出该元素的存储地址，又称哈希（Hash）存储</p>
<h3 id="3-算法特征："><a href="#3-算法特征：" class="headerlink" title="3.算法特征："></a>3.算法特征：</h3><p>确定性，可行性，输入，输出</p>
<h4 id="好算法特征："><a href="#好算法特征：" class="headerlink" title="好算法特征："></a>好算法特征：</h4><p>正确性，可读性，健壮性，高效率与低存储需求（时间，空间复杂度低）</p>
<p><img src="/posts/18d54854/image-20240911172342285.png" alt="image-20240911172342285"></p>
<h2 id="二、链表"><a href="#二、链表" class="headerlink" title="二、链表"></a>二、链表</h2><h3 id="1-数组的优缺点："><a href="#1-数组的优缺点：" class="headerlink" title="1.数组的优缺点："></a>1.数组的优缺点：</h3><p>优点：存储速度快</p>
<p>缺点：需要一个连续很大的内存，插入和删除元素的效率很低</p>
<h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><p>优点：插入 删除元素效率高，不需要一个连续的很大内存</p>
<p>缺点：查找某个元素的效率低</p>
<h3 id="3-术语："><a href="#3-术语：" class="headerlink" title="3.术语："></a>3.术语：</h3><h4 id="首节点"><a href="#首节点" class="headerlink" title="首节点"></a><strong>首节点</strong></h4><ul>
<li>存放第一个有效数据的节点</li>
</ul>
<h4 id="尾节点"><a href="#尾节点" class="headerlink" title="尾节点"></a><strong>尾节点</strong></h4><ul>
<li>存放最后一个元素的有效数据节点</li>
</ul>
<h4 id="头结点："><a href="#头结点：" class="headerlink" title="头结点："></a><strong>头结点：</strong></h4><ol>
<li>头结点的数据类型和首节点的类型是一样的</li>
<li>头结点是首结点前面的那个节点</li>
<li>头结点里面不存放有效数据</li>
<li>设置结点是为了方便对链表经行操作</li>
</ol>
<h4 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a><strong>头指针</strong></h4><ul>
<li>存放头结点的地址的指针变量</li>
<li>可以通过头指针推算出链表的其他信息</li>
</ul>
<h3 id="4-链表的定义"><a href="#4-链表的定义" class="headerlink" title="4.链表的定义"></a>4.链表的定义</h3><ul>
<li>n个节点离散分配</li>
<li>彼此通过指针相连接</li>
<li>每个节点只有一个前驱节点和后驱节点</li>
<li>首节点没有前驱节点，  尾节点没有后续节点</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> date;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指向下一元素的指针域-递归（相同类型的指针)</span></span><br><span class="line">}Node,*pNode;<span class="comment">//node等价于struct Node,pNode等价于struct Node *</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="5-分类："><a href="#5-分类：" class="headerlink" title="5.分类："></a>5.分类：</h3><ul>
<li><p>单链表</p>
</li>
<li><p>双链表</p>
<p>​        每一个节点都有两个指针域</p>
</li>
<li><p>循环链表</p>
<p>​       能通过任何一个节点找到其他所有节点</p>
</li>
<li><p>非循环链表</p>
</li>
</ul>
<h3 id="6-算法"><a href="#6-算法" class="headerlink" title="6.算法"></a>6.算法</h3><p>遍历</p>
<p>查找</p>
<p>清空</p>
<p>销毁</p>
<p>排序</p>
<p>删除节点</p>
<p>插入节点 </p>
<h3 id="7-创建带头单链表并遍历输出"><a href="#7-创建带头单链表并遍历输出" class="headerlink" title="7.创建带头单链表并遍历输出"></a>7.创建带头单链表并遍历输出</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Created by 李阳 on 2024/9/26.</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据结构之链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义单链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指向下一元素的指针域-递归（相同类型的指针)</span></span><br><span class="line">}Node,* pNode;<span class="comment">//node等价于struct Node,pNode等价于struct Node *</span></span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pNode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    pNode pHead =<span class="literal">NULL</span>;<span class="comment">//等价于struct Node * pHead =NULL;</span></span><br><span class="line">    pHead = creat_list();<span class="comment">//创建一个非循环的单链表，并将该链表的头结点的地址给pHead</span></span><br><span class="line">    traverse_list(pHead);<span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建单链表（带头）</span></span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span> {<span class="comment">//返回值是一个地址</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> val;<span class="comment">//用来临时存放用户输入的节点值</span></span><br><span class="line">  <span class="comment">//分配了一个不存放有效数据的头结点</span></span><br><span class="line">    pNode pHead =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    pNode pTail=pHead;<span class="comment">//定义了一个指针变量，首先分配一个头节点 pHead。然后，将 pTail 初始化为指向这个头节点。由于此时链表为空，头节点也是尾节点。</span></span><br><span class="line">    pTail-&gt;pNext=<span class="literal">NULL</span>;<span class="comment">//地址为空</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入链表的节点个数：len ="</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        pNode pNew =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        pNew-&gt;data=val;<span class="comment">//将临时val的值放给新创的节点</span></span><br><span class="line">        pTail-&gt;pNext=pNew;<span class="comment">// 设置为指向新节点的指针，这样新节点就被添加到了链表的末尾</span></span><br><span class="line">        pNew-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line">        pTail=pNew;<span class="comment">//pTail 将指向链表的最后一个节点(更新，向后移）</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pHead ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">      pNode p=pHead-&gt;pNext;<span class="comment">//定义了一个指针变量p，将链表的头指针给p</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> !=p)<span class="comment">//p不为NULL时</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,p-&gt;data);<span class="comment">//打印p的数据</span></span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p向后移</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="8-※链表的基本操作※"><a href="#8-※链表的基本操作※" class="headerlink" title="8.※链表的基本操作※"></a>8.※链表的基本操作※</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Created by 李阳 on 2024/9/26.</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据结构之单链表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span><span class="comment">//指向下一元素的指针域-递归（相同类型的指针)</span></span><br><span class="line">}Node,* pNode;<span class="comment">//node等价于struct Node,pNode等价于struct Node *</span></span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pNode)</span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(pNode pHead)</span>;<span class="comment">//是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(pNode)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(pNode,<span class="type">int</span> ,<span class="type">int</span> )</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(pNode pHead,<span class="type">int</span> pos,<span class="type">int</span> *pval)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(pNode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    pNode pHead =<span class="literal">NULL</span>;<span class="comment">//等价于struct Node * pHead =NULL;</span></span><br><span class="line">    pHead = creat_list();<span class="comment">//创建一个非循环的单链表，并将该链表的头结点的地址给pHead</span></span><br><span class="line">    traverse_list(pHead);<span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //判断链表是否为空</span></span><br><span class="line"><span class="comment">    if(is_empty(pHead))</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        printf("链表为空！\n");</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        printf("链表不空");</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //返回链表长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    int len= length_list(pHead);</span></span><br><span class="line"><span class="comment">    printf("链表长度是 %d\n",len);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //排序</span></span><br><span class="line"><span class="comment">    printf("从小到大排序后的代码是：\n");</span></span><br><span class="line"><span class="comment">    sort_list(pHead);</span></span><br><span class="line"><span class="comment">    traverse_list(pHead);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //插入</span></span><br><span class="line"><span class="comment">    insert_list(pHead,3,44);</span></span><br><span class="line"><span class="comment">    traverse_list(pHead);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //删除</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    if(delete_list(pHead,3,&amp;val))</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        printf("删除成功，您删除的元素是%d\n",val);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    } else</span></span><br><span class="line"><span class="comment">        printf("删除未成功\n");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    traverse_list(pHead);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">pNode <span class="title function_">creat_list</span><span class="params">()</span> {<span class="comment">//返回值是一个地址</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> val;<span class="comment">//用来临时存放用户输入的节点值</span></span><br><span class="line">  <span class="comment">//分配了一个不存放有效数据的头结点</span></span><br><span class="line">    pNode pHead =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    pNode pTail=pHead;<span class="comment">//定义了一个指针变量，首先分配一个头节点 pHead。然后，将 pTail 初始化为指向这个头节点。由于此时链表为空，头节点也是尾节点。</span></span><br><span class="line">    pTail-&gt;pNext=<span class="literal">NULL</span>;<span class="comment">//地址为空</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入链表的节点个数：len ="</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入第%d个节点的值"</span>,i+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val);</span><br><span class="line">        pNode pNew =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        }</span><br><span class="line">        pNew-&gt;data=val;<span class="comment">//将临时val的值放给新创的节点</span></span><br><span class="line">        pTail-&gt;pNext=pNew;<span class="comment">// 设置为指向新节点的指针，这样新节点就被添加到了链表的末尾</span></span><br><span class="line">        pNew-&gt;pNext=<span class="literal">NULL</span>;</span><br><span class="line">        pTail=pNew;<span class="comment">//pTail 将指向链表的最后一个节点(更新，向后移）</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> pHead ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">      pNode p=pHead-&gt;pNext;<span class="comment">//定义了一个指针变量p，将链表的头指针给p</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span> !=p)<span class="comment">//p不为NULL时</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>,p-&gt;data);<span class="comment">//打印p的数据</span></span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p向后移</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">is_empty</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pHead-&gt;pNext)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回链表长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">length_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line">    pNode p=pHead-&gt;pNext;<span class="comment">//定义了一个指针变量p，将头节点的地址给他</span></span><br><span class="line">    <span class="type">int</span> len =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span>!=p)<span class="comment">//如果这里面是空的</span></span><br><span class="line">    {</span><br><span class="line">        ++len;<span class="comment">//++</span></span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p指向下一个元素</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort_list</span><span class="params">(pNode pHead)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> i,j,t;</span><br><span class="line"><span class="type">int</span> len = length_list(pHead);</span><br><span class="line">pNode p,q;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>,p=pHead-&gt;pNext; i &lt;len<span class="number">-1</span> ; ++i,p=p-&gt;pNext) {<span class="comment">//p放的是第一个元素，</span></span><br><span class="line">        <span class="keyword">for</span> (j = i+<span class="number">1</span>,q=p-&gt;pNext; j &lt;len ; ++j,q=q-&gt;pNext) {<span class="comment">//q放的是p的后面的一个元素</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;data &gt; q-&gt;data)</span><br><span class="line">            {</span><br><span class="line">                t=p-&gt;data;</span><br><span class="line">                p-&gt;data=q-&gt;data;</span><br><span class="line">                q-&gt;data=t;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入--在第pos的前面插入一个新的节点val，pos从1开始</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">insert_list</span><span class="params">(pNode pHead,<span class="type">int</span> pos,<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    pNode p=pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span>!=p &amp;&amp; i&lt;pos<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        p=p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || <span class="literal">NULL</span> ==p)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pNode pNew =(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pNew)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"动态内存分配失败\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    pNew -&gt;data=val;<span class="comment">//定义了一个新节点，将val先放进去</span></span><br><span class="line">    pNode q=p-&gt;pNext;<span class="comment">//p此时已经来到了pos-1的地方，也就是他的前面，</span></span><br><span class="line">    p-&gt;pNext=pNew;<span class="comment">//将他的地址给pNew</span></span><br><span class="line">    pNew-&gt;pNext=q;<span class="comment">//再将pNew的下一元素的地址给next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete_list</span><span class="params">(pNode pHead,<span class="type">int</span> pos,<span class="type">int</span> * pval)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    pNode p=pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">NULL</span>!=p-&gt;pNext &amp;&amp; i&lt;pos<span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        p=p-&gt;pNext;</span><br><span class="line">        i++;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(i&gt;pos<span class="number">-1</span> || <span class="literal">NULL</span> ==p-&gt;pNext)<span class="comment">//pos-1:eg:删除第3个必须要知道第二个</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    pNode q=p-&gt;pNext;<span class="comment">//第pos个节点</span></span><br><span class="line">    *pval=q-&gt;data;<span class="comment">//将要删除的节点保存下来</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除p节点后面的节点</span></span><br><span class="line">    p-&gt;pNext=p-&gt;pNext-&gt;pNext;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    q=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="三、栈"><a href="#三、栈" class="headerlink" title="三、栈"></a>三、栈</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>​             一种可以实现“先进后出”的存储结构</p>
<p>​            栈类似于一个箱子，先放进去的后拿出来，后进去的先拿出来</p>
<h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p>   静态栈</p>
<p>   动态栈</p>
<h3 id="3-算法"><a href="#3-算法" class="headerlink" title="3.算法"></a>3.算法</h3><p>​      出栈</p>
<p>​      压栈</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据结构之栈 o.O</span></span><br><span class="line"><span class="comment"> *  Created by 李阳 on 2024/10/9.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">pNext</span>;</span></span><br><span class="line">}Node,*pNode;</span><br><span class="line"><span class="comment">//栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    pNode pTop;<span class="comment">//元素顶部</span></span><br><span class="line">    pNode pBottom;<span class="comment">//元素底部</span></span><br><span class="line">}sTack,*pStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(pStack)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(pStack pS,<span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse</span><span class="params">(pStack)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">popStack</span><span class="params">(pStack,<span class="type">int</span> *)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">empty</span><span class="params">(pStack pS)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(pStack pS)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">   sTack S;<span class="comment">//sTack等价于 struct Stack--建立了一个名为S的成员变量，里面有两个元素，ptop和pbottom，里面暂时没有有效数据</span></span><br><span class="line"></span><br><span class="line">   initStack(&amp;S);<span class="comment">//初始化-造出空栈</span></span><br><span class="line">   pushStack(&amp;S,<span class="number">1</span>);<span class="comment">//压栈</span></span><br><span class="line">    pushStack(&amp;S,<span class="number">2</span>);<span class="comment">//压栈</span></span><br><span class="line">    pushStack(&amp;S,<span class="number">3</span>);<span class="comment">//压栈</span></span><br><span class="line">    pushStack(&amp;S,<span class="number">4</span>);<span class="comment">//压栈</span></span><br><span class="line"></span><br><span class="line">    traverse(&amp;S);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空</span></span><br><span class="line">    clear(&amp;S);</span><br><span class="line">   <span class="comment">// traverse(&amp;S);//输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">if</span>( popStack(&amp;S,&amp;val))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈成功，出栈的元素是：%d\n"</span>,val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出栈失败\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   traverse(&amp;S);<span class="comment">//输出</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    pS-&gt;pTop=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (Node));<span class="comment">//将top指向一个新造的空节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==pS-&gt;pTop)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        pS-&gt;pBottom=pS-&gt;pTop;<span class="comment">//地址都指向空节点</span></span><br><span class="line">        pS-&gt;pTop-&gt;pNext=<span class="literal">NULL</span>;<span class="comment">//将新造的节点的指针域为空--因为他是最后一个元素的下一个元素，因此没有指针域</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//压栈--进栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(pStack pS,<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    pNode pNew=(pNode) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (Node));</span><br><span class="line">    pNew-&gt;data=val;</span><br><span class="line">    pNew-&gt;pNext=pS-&gt;pTop;<span class="comment">//此时ptoop里面放的是初始化时的临时变量地址，这里调用，将新建的栈的指针域指向初始化的元素地址</span></span><br><span class="line">    pS-&gt;pTop=pNew;<span class="comment">//再将新的节点地址给top</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    pNode p=pS-&gt;pTop;<span class="comment">//定义个临时指针变量p，将头的值给p，</span></span><br><span class="line">    <span class="keyword">while</span> (p!=pS-&gt;pBottom)<span class="comment">//当p为底部元素时程序终止</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;pNext;<span class="comment">//p指向p的下一元素地址</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">empty</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(pS-&gt;pTop==pS-&gt;pBottom)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">bool</span> <span class="title function_">popStack</span><span class="params">(pStack pS,<span class="type">int</span> * pVal)</span><span class="comment">//把ps所指向的栈出栈一次，并将出栈元素存入pval新参所指向的变量中，成功返回true，否则false</span></span><br><span class="line">{</span><br><span class="line">     <span class="keyword">if</span>(empty(pS))</span><br><span class="line">     {</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     }</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     {</span><br><span class="line">        pNode r=pS-&gt;pTop;<span class="comment">//定义一个变量r，将顶元素给r</span></span><br><span class="line">        *pVal=r-&gt;data;</span><br><span class="line">        pS-&gt;pTop=r-&gt;pNext;<span class="comment">//再将top指向下一元素，这样r就被孤立了</span></span><br><span class="line">         <span class="built_in">free</span>(r);</span><br><span class="line">         r=<span class="literal">NULL</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(pStack pS)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(empty(pS))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">    pNode p=pS-&gt;pTop;</span><br><span class="line">    pNode q=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (p!=pS-&gt;pBottom)</span><br><span class="line">        {</span><br><span class="line">            q=p-&gt;pNext;<span class="comment">//q指向第二个</span></span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            p=q;<span class="comment">//p又指向了下一个元素了</span></span><br><span class="line">        }</span><br><span class="line">        pS-&gt;pTop=pS-&gt;pBottom;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-应用"><a href="#4-应用" class="headerlink" title="4.应用"></a>4.应用</h3><p>函数调用</p>
<p>中断</p>
<p>表达式求值</p>
<p>内存分配</p>
<p>缓存处理</p>
<p>迷宫</p>
<h3 id="5-栈的表达式求值—后缀表达式（逆波兰表达式）"><a href="#5-栈的表达式求值—后缀表达式（逆波兰表达式）" class="headerlink" title="5.栈的表达式求值—后缀表达式（逆波兰表达式）"></a>5.栈的表达式求值—后缀表达式（逆波兰表达式）</h3><p><strong>1.例如：1+2*3</strong></p>
<p>​     后缀表达式为 1 2 3 * +</p>
<p>​             遇到一个运算符他会在前面两个数字间运算 </p>
<ol>
<li>​          2 *3</li>
<li>然后向后移到+    </li>
<li>6+1</li>
</ol>
<p><strong>2、(a + b) * (c - (d / e)) + f</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b + c d e / - * f +</span><br></pre></td></tr></table></figure>
<p><strong>3.、a * (b + c) - (d / e)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b c + * d e / -</span><br></pre></td></tr></table></figure>
<p><strong>4、a + b * (c - d / e) ^ f</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b c d e / - f ^ * +</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 操作数和运算符</span><br><span class="line">操作数（如变量和常数）直接添加到输出列表中。</span><br><span class="line">运算符则需要根据优先级和括号来决定是否入栈、弹出或保持在栈中。</span><br><span class="line">2. 运算符优先级</span><br><span class="line">运算符的优先级从高到低一般为：</span><br><span class="line">* 和 / （乘法和除法）优先级高</span><br><span class="line">+ 和 - （加法和减法）优先级低</span><br><span class="line">在遇到相同优先级的运算符时，按照左结合性处理（从左到右）。</span><br><span class="line">3. 括号的处理</span><br><span class="line">遇到左括号 ( 时，直接入栈。</span><br><span class="line">遇到右括号 ) 时，弹出栈中的运算符到输出，直到遇到对应的左括号为止，左括号被丢弃。</span><br><span class="line">4. 栈的使用</span><br><span class="line">当一个运算符被处理时，检查栈顶运算符的优先级：</span><br><span class="line">如果栈顶运算符的优先级高于或等于当前运算符，则弹出栈顶运算符到输出。</span><br><span class="line">否则，将当前运算符入栈。</span><br><span class="line">5. 表达式结束时的处理</span><br><span class="line">当整个中序表达式处理完毕后，仍有运算符在栈中时，将它们全部弹出到输出。</span><br><span class="line">6. 后缀表达式的特征</span><br><span class="line">后缀表达式不需要括号，因为运算符的顺序和位置已经明确了运算的优先级和关联性。</span><br></pre></td></tr></table></figure>
<p><strong>当一个运算符被处理时，检查栈顶运算符的优先级：</strong><br><strong>如果栈顶运算符的优先级高于或等于当前运算符，则弹出栈顶运算符到输出。</strong><br><strong>否则，将当前运算符入栈。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当然可以，关于将中序表达式转换为后缀表达式（也称为逆波兰表达式）时处理括号和运算符的一些规律，可以总结如下：</span><br><span class="line"></span><br><span class="line">括号处理：</span><br><span class="line">左括号 (：在遇到左括号时，通常不需要立即进行任何操作，但可以将其视为一个标记，表示一个新的运算范围的开始。在某些实现中，可能会使用一个辅助栈来跟踪左括号的位置或数量。</span><br><span class="line">右括号 )：当遇到右括号时，需要开始从运算符栈中弹出运算符，并将它们添加到后缀表达式中，直到遇到对应的左括号或栈为空。弹出的运算符应该按照它们被压入栈的顺序的逆序添加到后缀表达式中。</span><br><span class="line">运算符栈：</span><br><span class="line">运算符栈用于存储等待处理的运算符。当遇到一个新的运算符时，需要将其与栈顶的运算符进行比较，以确定是否需要弹出栈顶的运算符（基于运算符的优先级）。</span><br><span class="line">栈顶的运算符具有更高的优先级时（或者当前运算符需要右结合时），它应该被弹出并添加到后缀表达式中。这个过程一直持续到栈顶的运算符优先级低于或等于当前运算符，或者栈为空。</span><br><span class="line">操作数处理：</span><br><span class="line">操作数（如变量、常量等）直接添加到后缀表达式中，不需要经过运算符栈的处理。</span><br><span class="line">运算符优先级和结合性：</span><br><span class="line">运算符的优先级决定了在相同位置上的运算符哪个应该先被处理。例如，乘法和除法的优先级高于加法和减法。</span><br><span class="line">运算符的结合性决定了当两个运算符具有相同的优先级时，它们应该如何组合。例如，加法和乘法都是从左到右结合的。</span><br><span class="line">后缀表达式的构建：</span><br><span class="line">后缀表达式是通过从左到右扫描中序表达式，并根据上述规则处理运算符和括号来构建的。</span><br><span class="line">最终的后缀表达式应该只包含操作数和运算符，并且运算符的顺序应该反映了它们在中序表达式中的计算顺序。</span><br><span class="line">验证：</span><br><span class="line">一个简单的方法来验证后缀表达式是否正确是将其转换回中序表达式（这通常涉及使用一个额外的栈来模拟计算过程），并检查转换后的中序表达式是否与原始表达式相同。</span><br><span class="line">另一种方法是直接计算后缀表达式和原始中序表达式的值，并检查它们是否相等。</span><br><span class="line">这些规律是理解和实现中序表达式到后缀表达式转换的关键。通过遵循这些规律，可以确保转换过程的正确性和效率。</span><br></pre></td></tr></table></figure>
<h2 id="四、队列"><a href="#四、队列" class="headerlink" title="四、队列"></a>四、队列</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>​        一种可以实现“先进先出”的存储结构—排队买票进站 </p>
<h3 id="2-分类-1"><a href="#2-分类-1" class="headerlink" title="2.分类"></a>2.分类</h3><p>​    链式队列（链表）</p>
<p>​    静态队列（数组）</p>
<p>​            静态队列通常都必须是循环队列</p>
<p>​                      <img src="/posts/18d54854/image-20241010163206657-1729000222964-1.png" alt="image-20241010163206657">        </p>
<h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by 李阳 on 2024/10/14.</span></span><br><span class="line"><span class="comment"> * 数据结构之静态循环队列o.O</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> *pBase;</span><br><span class="line">    <span class="type">int</span> front;<span class="comment">//首</span></span><br><span class="line">    <span class="type">int</span> rear;<span class="comment">//尾</span></span><br><span class="line">} QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(QUEUE *)</span>;<span class="comment">//改变实参的值所以要加*</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE *,<span class="type">int</span>)</span>;<span class="comment">//入队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE *)</span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">full_queue</span><span class="params">(QUEUE *)</span>;<span class="comment">//判断是否满</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE *,<span class="type">int</span> *pVal)</span>;<span class="comment">//出队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">emput_queue</span><span class="params">(QUEUE *)</span>;<span class="comment">//判断是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    QUEUE Q;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    init(&amp;Q);<span class="comment">//调用初始化函数</span></span><br><span class="line">    en_queue(&amp;Q,<span class="number">1</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">2</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">3</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">4</span>);</span><br><span class="line">    en_queue(&amp;Q,<span class="number">5</span>);</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (out_queue(&amp;Q, &amp;val)) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队成功: %d\n"</span>, val); <span class="comment">// 修正输出格式</span></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"出队失败\n"</span>);</span><br><span class="line">    }</span><br><span class="line">    traverse_queue(&amp;Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(QUEUE *pQ)</span></span><br><span class="line">{</span><br><span class="line">    pQ-&gt;pBase=(<span class="type">int</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span> (<span class="type">int</span>)*<span class="number">6</span>);<span class="comment">//定义了6个数据的数组</span></span><br><span class="line">    pQ-&gt;front=pQ-&gt;rear=<span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">en_queue</span><span class="params">(QUEUE *pQ,<span class="type">int</span> val)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(full_queue(pQ))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"队列满啦"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear]=val;<span class="comment">//将值放入尾部，并且尾部要+1</span></span><br><span class="line">        pQ-&gt;rear=(pQ-&gt;rear+<span class="number">1</span>)%<span class="number">6</span>;<span class="comment">//尾部+1--因为是循环队列，当他满的时候会又从0开始</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为满</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">full_queue</span><span class="params">(QUEUE *pQ)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>((pQ-&gt;rear+<span class="number">1</span>)%<span class="number">6</span>==pQ-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse_queue</span><span class="params">(QUEUE *pQ)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=pQ-&gt;front;</span><br><span class="line">    <span class="keyword">while</span> ((i!=pQ-&gt;rear))</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,pQ-&gt;pBase[i]);</span><br><span class="line">        i=(i+<span class="number">1</span>)%<span class="number">6</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">emput_queue</span><span class="params">(QUEUE * pQ)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(pQ-&gt;front==pQ-&gt;rear)</span><br><span class="line">    {</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">out_queue</span><span class="params">(QUEUE * pQ,<span class="type">int</span> *pVal)</span><span class="comment">//因为要带回来值，所以要*</span></span><br><span class="line">{</span><br><span class="line">   <span class="keyword">if</span>(emput_queue(pQ))</span><br><span class="line">   {</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"表是空的"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   } <span class="keyword">else</span></span><br><span class="line">   {</span><br><span class="line">     *pVal=pQ-&gt;pBase[pQ-&gt;front];</span><br><span class="line">     pQ-&gt;front=(pQ-&gt;front+<span class="number">1</span>)%<span class="number">6</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="4-队列的操作"><a href="#4-队列的操作" class="headerlink" title="4.队列的操作"></a>4.队列的操作</h3><p>所有和时间有关的操作</p>
<h2 id="五、递归"><a href="#五、递归" class="headerlink" title="五、递归"></a>五、递归</h2><p><img src="/posts/18d54854/image-20241015182021998.png" alt="image-20241015182021998"></p>
<h3 id="1-简单应用—阶层"><a href="#1-简单应用—阶层" class="headerlink" title="1.简单应用—阶层"></a>1.简单应用—阶层</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数据结构之递归</span></span><br><span class="line"><span class="comment"> * Created by 李阳 on 2024/10/15.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//demo1--求阶层</span></span><br><span class="line"><span class="comment">/* for循环版</span></span><br><span class="line"><span class="comment">int jiec(int a)</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">    int b=1;</span></span><br><span class="line"><span class="comment">    int i;</span></span><br><span class="line"><span class="comment">    for ( i=1; i &lt;=a; ++i)</span></span><br><span class="line"><span class="comment">    {</span></span><br><span class="line"><span class="comment">        b=b*i;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    return b;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">{</span></span><br><span class="line"><span class="comment">    int b=5;</span></span><br><span class="line"><span class="comment">    int a= jiec(b);</span></span><br><span class="line"><span class="comment">    printf("%d 的阶层是 %d",b,a);</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归版</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">f</span><span class="params">(<span class="type">long</span> n)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span>==n)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> f(n<span class="number">-1</span>)*n;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">   <span class="type">long</span> a,b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入要求的阶层"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">    b= f(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld 的阶层是 %ld"</span>,a,b);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//递归实现1+2+...</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">sum</span><span class="params">(<span class="type">long</span> n)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> sum(n<span class="number">-1</span>)+n;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h3 id="2-定义，要求，意义"><a href="#2-定义，要求，意义" class="headerlink" title="2.定义，要求，意义"></a>2.定义，要求，意义</h3><h4 id="①定义："><a href="#①定义：" class="headerlink" title="①定义："></a>①<strong>定义：</strong></h4><p>一个函数间接或直接调用自己</p>
<h4 id="②递归需要满足的三个条件"><a href="#②递归需要满足的三个条件" class="headerlink" title="②递归需要满足的三个条件"></a>②<strong>递归需要满足的三个条件</strong></h4><ol>
<li>递归必须要有一个明确的终止条件</li>
<li>该函数所处理的数据规模必须在递减</li>
<li>这个转化必须是可解的</li>
</ol>
<h4 id="③意义"><a href="#③意义" class="headerlink" title="③意义"></a>③<strong>意义</strong></h4><p>优点：易于理解</p>
<p>缺点：速度慢，存储空间大</p>
<h4 id="④循环："><a href="#④循环：" class="headerlink" title="④循环："></a>④<strong>循环</strong>：</h4><p>不易理解，速度快，存储空间小</p>
<h2 id="六、串、数组和广义表"><a href="#六、串、数组和广义表" class="headerlink" title="六、串、数组和广义表"></a>六、串、数组和广义表</h2><h3 id="一、串（string）"><a href="#一、串（string）" class="headerlink" title="一、串（string）"></a>一、串（string）</h3><p>0个或多个任意字符组成的有限序列</p>
<h4 id="1-子串的定义"><a href="#1-子串的定义" class="headerlink" title="1.子串的定义"></a>1.子串的定义</h4><p>一个串中任意个连续字符组成的子序列（含空串）称为该串的子串</p>
<p>例如：“abcd”的子串有 </p>
<p>“ ”，“a”,”ab”,”abc”,”abcd”</p>
<p><strong>真子串</strong>：是指不包含自身的所有子串</p>
<p><strong>主串</strong>:包含子串的串相应的称为主串</p>
<p><strong>字符位置</strong>:字符在序列中的序号为该字符串中的位置</p>
<p><strong>子串位置</strong>：子串第一个字符在主串中的位置</p>
<p><strong>空格串：</strong>由一个或多个空格组成的串，与空串不同</p>
<p><img src="/posts/18d54854/image-20241015220006062.png" alt="image-20241015220006062"></p>
<p><strong>串相等:</strong>当且仅当两个串的长度相等并且各个对应立置上的字符都相同时，这两个串才是相等的。</p>
<h4 id="2-串的类型定义、存储结构及运算"><a href="#2-串的类型定义、存储结构及运算" class="headerlink" title="2.串的类型定义、存储结构及运算"></a>2.串的类型定义、存储结构及运算</h4><p>顺序存储结构-顺序串</p>
<p>链式存储结构-链式串</p>
<h4 id="3-串的表示"><a href="#3-串的表示" class="headerlink" title="3.串的表示"></a>3.串的表示</h4><h5 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串的顺序存储结构</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN+<span class="number">1</span>];<span class="comment">//存储串的一维数组1-255</span></span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//串的当前长度</span></span><br><span class="line">}SString;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="链式存储-1"><a href="#链式存储-1" class="headerlink" title="链式存储"></a>链式存储</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串的链式存储结构--块链结构</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE 80</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> {</span></span><br><span class="line">    <span class="type">char</span> ch[CHUNKSIZE]; <span class="comment">// 存储字符块</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> *<span class="title">next</span>;</span>  <span class="comment">// 指向下一个块的指针</span></span><br><span class="line">} Chunk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    Chunk *head;  <span class="comment">// 串的首指针</span></span><br><span class="line">    Chunk *tail;  <span class="comment">// 串的尾指针</span></span><br><span class="line">    <span class="type">int</span> curlen;   <span class="comment">// 串的当前长度</span></span><br><span class="line">} LString;</span><br></pre></td></tr></table></figure>
<h4 id="4-串的模式匹配"><a href="#4-串的模式匹配" class="headerlink" title="4.串的模式匹配"></a>4.串的模式匹配</h4><h5 id="1-BF算法（穷举法）"><a href="#1-BF算法（穷举法）" class="headerlink" title="1.BF算法（穷举法）"></a>1.BF算法（穷举法）</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">index_BF</span><span class="params">(SString S,SString T)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=S.length&amp;&amp;j&lt;=T.length)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]==T.ch[j])</span><br><span class="line">        {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        } <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            i=(i-j)+<span class="number">2</span>;j=<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">  <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">      <span class="keyword">return</span> i-T.length;<span class="comment">//匹配成功</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="/posts/18d54854/image-20241016164724670.png" alt="image-20241016164724670"></p>
<h5 id="2-※※※-KMP算法"><a href="#2-※※※-KMP算法" class="headerlink" title="2.※※※ KMP算法"></a>2.<strong>※※※ KMP</strong>算法</h5><p><img src="/posts/18d54854/image-20241017130343420.png" alt="image-20241017130343420"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算模式串 T 的 next 数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_next</span><span class="params">(SString T, <span class="type">int</span> next[])</span> {</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;  <span class="comment">// T 的当前位置</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 前缀的长度</span></span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// next[0] 通常设为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; T.length) {</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || T.ch[i] == T.ch[j]) {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            next[i] = j; <span class="comment">// 注意：next[i] 是 i 位置的前缀长度</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j = next[j - <span class="number">1</span>]; <span class="comment">// 使用 next 数组回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP 算法实现，返回模式串 T 在主串 S 中首次出现的位置</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Index_KMP</span><span class="params">(SString S, SString T, <span class="type">int</span> next[])</span> {</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;  <span class="comment">// S 的当前位置</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;  <span class="comment">// T 的当前位置</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= S.length &amp;&amp; j &lt;= T.length) {</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || S.ch[i] == T.ch[j]) { <span class="comment">// j = -1 表示需要跳过</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j = next[j]; <span class="comment">// 使用 next 数组回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (j == T.length) <span class="keyword">return</span> i - T.length; <span class="comment">// 匹配成功，返回匹配位置</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 匹配失败，返回 -1</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h5 id="3-KMP算法改进"><a href="#3-KMP算法改进" class="headerlink" title="3.KMP算法改进"></a>3.KMP算法改进</h5><p><img src="/posts/18d54854/image-20241017144344602.png" alt="image-20241017144344602"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_nextval</span><span class="params">(SString T, <span class="type">int</span> nextval[])</span> {</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;  <span class="comment">// T 的当前位置</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  <span class="comment">// 前缀的长度</span></span><br><span class="line">    nextval[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">// next[0] 通常设为 0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; T.length) {</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || T.ch[i] == T.ch[j]) {</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span>(T.ch[i]!=T.ch[j])</span><br><span class="line">                nextval[i]=j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextval[i]=nextval[j];</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            j = nextval[j]; <span class="comment">// 使用 next 数组回溯</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h3><h4 id="1-定义-1"><a href="#1-定义-1" class="headerlink" title="1.定义"></a>1.定义</h4><p>按照一点格式排列起来的具有相同的数据元素集合</p>
<p><strong>一维数组</strong>：若线性表中的元素为非结构的简单元素，则称为一维数组（线性结构，定长的线性表）</p>
<p><strong>二维数组</strong>：若一维数组中的元素又是一维数组结构，则称为二维数组</p>
<p><strong>二维数组逻辑结构：</strong></p>
<ul>
<li>非线性结构： 每一个元素既在一个行表中，又在一个列表中</li>
<li>线性结构：该线性表的每一个元素也是一个定长的线性表</li>
</ul>
<p><strong>数组特点</strong>：结构固定—定义后，维度和为界不再改变</p>
<p><strong>结论</strong>:</p>
<ul>
<li>线性表结构是数组的一个特例</li>
<li>而数组结构又是线性表结构的扩展</li>
</ul>
<p><strong>基本操作</strong>：除了结构的初始化和销毁之外，只有取元素和修改元素值的操作</p>
<p>一般采用顺序结构来表示数组</p>
<h4 id="2-存储位置"><a href="#2-存储位置" class="headerlink" title="2.存储位置"></a>2.存储位置</h4><p><img src="/posts/18d54854/image-20241017154244958.png" alt="image-20241017154244958"></p>
<p>数组元素a[i] [j] 的存储位置是 LOC(i,j)=LOC(0,0)+n <em> i+j </em> L(L是存储每个元素所需要L个存储单元)</p>
<h4 id="3-压缩存储"><a href="#3-压缩存储" class="headerlink" title="3.压缩存储"></a>3.压缩存储</h4><ol>
<li>什么是压缩存储?<br>若多个数据元素的值都相同，则只分配一个元素值的存储空间，且零元素不占存储空间</li>
<li>什么样的矩阵能够压缩?<br>一些特殊矩阵，如:对称矩阵，对角矩阵，三角矩阵，稀疏矩阵等。</li>
<li>什么叫稀疏矩阵?<br>矩阵中非零元素的个数较少（一般小于5%)</li>
</ol>
<h5 id="1-对称矩阵"><a href="#1-对称矩阵" class="headerlink" title="1.对称矩阵"></a><strong>1.对称矩阵</strong></h5><ol>
<li><h6 id="特点"><a href="#特点" class="headerlink" title="[特点]"></a>[特点]</h6><p>沿着对角线对称</p>
<p>在nxn的矩阵a中，满足如下性质:    aij=aji (1 ≤i, j &lt;n)</p>
</li>
<li><h6 id="存储方法"><a href="#存储方法" class="headerlink" title="[存储方法]"></a>[存储方法]</h6><p>只存储下(或者上)三角(包括主对角线)的数据元素。共占用n(n+1)/2个元素空间。</p>
</li>
</ol>
<p><img src="/posts/18d54854/image-20241017155259933.png" alt="image-20241017155259933"></p>
<p><img src="/posts/18d54854/image-20241017155934811.png" alt="image-20241017155934811"></p>
<h5 id="2-三角矩阵"><a href="#2-三角矩阵" class="headerlink" title="2.三角矩阵"></a><strong>2.三角矩阵</strong></h5><ol>
<li><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="[特点]"></a>[特点]</h6><p>对角线以下(或者以上)的数据元素(不包括对角线)全部为常数co</p>
</li>
<li><h6 id="存储方法-1"><a href="#存储方法-1" class="headerlink" title="[存储方法]"></a>[存储方法]</h6><p>重复元素c共享一个元素存储空间，共占用n(n+1)/2+1个元素空间: sa[1.. n(n+1)/2+1]</p>
</li>
</ol>
<p><img src="/posts/18d54854/image-20241017160251060.png" alt="image-20241017160251060"></p>
<h5 id="3-对角矩阵（带状矩阵）"><a href="#3-对角矩阵（带状矩阵）" class="headerlink" title="3.对角矩阵（带状矩阵）"></a><strong>3.对角矩阵（带状矩阵）</strong></h5><p>[特点]在nxn的方阵中，所有非零元素都集中在以主对角线为中心的带状区域中，区域外的值全为0，则称为对角矩阵。常见的有三对角矩阵、五对角矩阵、七对角矩阵等。</p>
<p><img src="/posts/18d54854/image-20241017160553699.png" alt="image-20241017160553699"></p>
<p><img src="/posts/18d54854/image-20241017160653491.png" alt="image-20241017160653491"></p>
<h5 id="4-稀疏矩阵"><a href="#4-稀疏矩阵" class="headerlink" title="4.稀疏矩阵"></a><strong>4.稀疏矩阵</strong></h5><p>稀疏矩阵:设在mxn的矩阵中有t个非零元素。<br>令ɸ= t/(mxn)<br>当ɸ≤0.05时称为稀疏矩阵。</p>
<p><img src="/posts/18d54854/image-20241017161616371.png" alt="image-20241017161616371" style="zoom:67%;"></p>
<p><img src="/posts/18d54854/image-20241017161810079.png" alt="image-20241017161810079" style="zoom:67%;"></p>
<p>三元组顺序表又称有序的双下标法。</p>
<ol>
<li><p>三元组顺序表的优点:非零元在表中按行序有序存储，因此便于进</p>
<p>行依行顺序处理的矩阵运算。</p>
</li>
<li><p>三元组顺序表的缺点:不能随机存取。若按行号存取某一行中的非</p>
<p>零元，则需从头开始进行查找。</p>
</li>
</ol>
<h6 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a><strong>十字链表</strong></h6><p>优点:它能够灵活地插入因运算而产生的新的非零元素，删除因运算而产生的新的零元素，实现矩阵的各种运算<br><img src="/posts/18d54854/image-20241017162515773.png" alt="image-20241017162515773"></p>
<p><img src="/posts/18d54854/image-20241017162538457.png" alt="image-20241017162538457"></p>
<p> <img src="/posts/18d54854/image-20241017163651081.png" alt="image-20241017163651081"></p>
<h3 id="三-广义表"><a href="#三-广义表" class="headerlink" title="三.广义表"></a>三.广义表</h3><h4 id="1-定义-2"><a href="#1-定义-2" class="headerlink" title="1.定义"></a>1.定义</h4><p>广义表 （又称列表Lists）是n≧0个元素 a0,a1…..an-1的有限序列，其中每一个ai或者是原子，或者是一个广义表</p>
<p><img src="/posts/18d54854/image-20241017164155126.png" alt="image-20241017164155126"></p>
<ul>
<li><p>广义表通常记作:Ls=(a1, a2,..，an)</p>
<p>其中:LS为表名，n为表的长度，每一个ai为表的元素</p>
</li>
<li><p>习惯上，一般用<strong>大写字母</strong>表示<strong>广义表</strong>，<strong>小写字母</strong>表示<strong>原子。</strong></p>
</li>
<li><p><strong>表头：</strong>若LS非空(n≥1)，则其第一个元素a1就是表头。<br>记作head(LS) = a1。<strong>注</strong>:表头可以是原子，也可以是子表。</p>
</li>
<li><p><strong>表尾</strong>：除<strong>表头</strong>之外的<strong>其它元素</strong>组成的<strong>表</strong>。</p>
<p>​      记作tail(LS） = (a2, …. an)。</p>
<p>​     注:表尾不是最后一个元素，而是一个<strong>子表。</strong></p>
<p><img src="/posts/18d54854/image-20241017170321265.png" alt="image-20241017170321265"></p>
</li>
</ul>
<h4 id="2-性质"><a href="#2-性质" class="headerlink" title="2.性质"></a>2.性质</h4><ul>
<li><p>(1)广义表中的数据元素有相对<strong>次序;一个直接前驱和一个直接后驱</strong></p>
</li>
<li><p>(2)广义表的<strong>长度</strong>定义为最外层所包含元素的个数;</p>
<p>​     如: C=(a (b, q))是长度为2的广义表。</p>
</li>
<li><p>(3)广义表的<strong>深度</strong>定义为该广义表<strong>展开后所含括号的重数</strong>;</p>
<p>​     A=(b ,c)的深度为1,B=(A,d)的深度为2，C=(f, B,h)的深度为3。</p>
<p>​     <strong>注意</strong>:“原子”的深度为0;“空表”的深度为1。</p>
</li>
<li><p>广义表可以为其他广义表<strong>共享</strong>，如：广义表B就共享了广义表A。在b中不必列出A的值，而是通过名称来引用，B=(A)</p>
</li>
<li><p>广义表可以是一个递归的表。如：F=（a,F=(a,(a,(a,…)))</p>
</li>
</ul>
<p>​               注意：递归表的深度是无穷值，长度是有限值，这里长度是2</p>
<ul>
<li>广义表是多层次结构，广义表的元素可以是单元素，也可以是子表，而子表的元素还可以是子表，….。<br>可以用图形象地表示。<br>例:D=(E，F）其中:E=(a, (b,c)）F=(d,(e))</li>
</ul>
<h4 id="3-广义表和线性表的区别"><a href="#3-广义表和线性表的区别" class="headerlink" title="3.广义表和线性表的区别"></a>3.广义表和线性表的区别</h4><ol>
<li>广义表可以看成是线性表的推广，线性表是广义表的特例。</li>
<li>广义表的结构相当灵活，在某种前提下，它可以兼容线性表、数组、树和有向图等各种常用的数据结构。</li>
<li>当二维数组的每行(或每列)作为子表处理时，二维数组即为一个广义表。</li>
<li>另外，树和有向图也可以用广义表来表示。</li>
<li>由于广义表不仅集中了线性表、数组、树和有向图等常见数据结构的特点，而且可有效地利用存储空间，因此在计算机的许多应用领域都有成功使用广义表的实例。</li>
</ol>
<h4 id="4-广义表的基本运算"><a href="#4-广义表的基本运算" class="headerlink" title="4.广义表的基本运算"></a>4.广义表的基本运算</h4><p> <img src="/posts/18d54854/image-20241031143536962.png" alt="image-20241031143536962"></p>
<p>案例分析</p>
<p><img src="/posts/18d54854/image-20241031144308247.png" alt="image-20241031144308247"></p>
<p>代码实现</p>
<h2 id="七、树"><a href="#七、树" class="headerlink" title="七、树"></a>七、树</h2><h3 id="1-树的定义"><a href="#1-树的定义" class="headerlink" title="1.树的定义"></a>1.树的定义</h3><p><img src="/posts/18d54854/image-20241031144903388.png" alt="image-20241031144903388"></p>
<h4 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h4><p><strong>树</strong>(Tree)是n (n≥0)个结点的有限集。(递归)<br>       若n =0，称为<strong>空树</strong>;<br>        若n &gt;0，则它满足如下两个条件:<br>              (1)<strong>有且仅有一个</strong>特定的称为<strong>根</strong>(Root)的结点;<br>              (2)<strong>其余结点</strong>可分为m (m≥0)个互不相交的<strong>有限集</strong>T1,T2,T3,…Tm，其中每一个集合本身又是一棵树，并称为根的<strong>子树</strong>(SubTree)。 </p>
<h4 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h4><p><strong>结点</strong>：数据元素以及指向树的分支</p>
<p><strong>根结点</strong>：非空树中无前驱点的结点</p>
<p><strong>结点的度</strong>：结点拥有的子树数</p>
<p>​    eg: A 3,B 2,F 1</p>
<p><img src="/posts/18d54854/image-20241031152141050.png" alt="image-20241031152141050"></p>
<p><strong>树的度</strong>： 数内各结点的度的最大值</p>
<p><strong>叶子结点：</strong>终端结点（度为0）</p>
<p>​          eg: k L G M J</p>
<p><strong>分支结点：</strong>非终端结点</p>
<p>​            eg: B,C,D…</p>
<p><strong>内部结点：</strong>根节点以外的分支结点称为内部结点 </p>
<p><strong>孩子结点：</strong>结点的子树的根称为孩子</p>
<p><strong>双亲结点</strong>：孩子结点的前驱</p>
<p><img src="/posts/18d54854/image-20241031154837095.png" alt="image-20241031154837095"></p>
<p>​       eg: BCD是A的孩子结点，A是bcd的双亲结点</p>
<p><strong>兄弟结点</strong>：同级的结点</p>
<p><strong>祖先结点：</strong>从根到该结点所经分支上的所有结点</p>
<p>​           eg: M的祖先结点为H,D,A</p>
<p><strong>子孙结点：</strong>从某结点为根的子树的任意结点</p>
<p>​          eg: D的孙子有HM</p>
<p><strong>树的深度：</strong>树中结点的最大层次</p>
<p><strong>有序树：</strong>树中的各子树从左至右有次序(最左边为第一个孩子)</p>
<p><strong>无序树：</strong>树中结点的各子树无次序</p>
<p><strong>森林：</strong>是m（m&gt;=0)棵互不相交的树的集合</p>
<p><img src="/posts/18d54854/image-20241031160124987.png" alt="image-20241031160124987"></p>
<p>​              树一定是森林，森林不一定是树</p>
<h4 id="树结构和线性结构的比较"><a href="#树结构和线性结构的比较" class="headerlink" title="树结构和线性结构的比较"></a>树结构和线性结构的比较</h4><p><img src="/posts/18d54854/image-20241031160854242.png" alt="image-20241031160854242"></p>
<h3 id="2-二叉树的定义"><a href="#2-二叉树的定义" class="headerlink" title="2.二叉树的定义"></a>2.二叉树的定义</h3><p><img src="/posts/18d54854/image-20241031161122434.png" alt="image-20241031161122434"></p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​    二叉树是n(n&gt;=0)个结点的有限集，它或者是空集(n= 0),或者由一个根结点及两棵互不相交的分别称作这个根的左子树和右子树的二叉树组成。</p>
<h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ol>
<li>每个结点最多有俩孩子(二叉树中不存在度大于2的结点)。</li>
<li>子树有左右之分，其次序不能颠倒。</li>
<li>二叉树可以是空集合，根可以有空的左子树或空的右子树。</li>
</ol>
<h4 id="树和二叉树区别"><a href="#树和二叉树区别" class="headerlink" title="树和二叉树区别"></a><strong>树和二叉树区别</strong></h4><ul>
<li>二叉树不是树的特殊情况，它们是两个概念</li>
<li>二叉树结点的子树要区分左子树和右子树，即使只有一棵子树也经行区分，说明它是左子树，还是右子树。</li>
<li>树当结点只有一个孩子时，就无须区分它是左还是右的次序。因此二者是不同的。这是二叉树与树的最主要的差别。</li>
<li>(也就是二叉树每个结点位置或者次序都是固定的，可以是空，但是个可以说它没有位置，而树的结点位置是相对于别的结点来说的，没有别的结点时.它就无所谓左右了)</li>
</ul>
<p><img src="/posts/18d54854/image-20241031161802875.png" alt="image-20241031161802875"></p>
<p><img src="/posts/18d54854/image-20241031161947956.png" alt="image-20241031161947956"></p>
<h3 id="3-案例引用"><a href="#3-案例引用" class="headerlink" title="3.案例引用"></a>3.案例引用</h3><p><img src="/posts/18d54854/image-20241031162420574.png" alt="image-20241031162420574"></p>
<h3 id="4-树和二叉树的抽象数据类型定义"><a href="#4-树和二叉树的抽象数据类型定义" class="headerlink" title="4.树和二叉树的抽象数据类型定义"></a>4.树和二叉树的抽象数据类型定义</h3><p><img src="/posts/18d54854/image-20241031162925621.png" alt="image-20241031162925621"></p>
<p><img src="/posts/18d54854/image-20241031170614463.png" alt="image-20241031170614463"></p>
<h3 id="5-二叉树的性质和存储结构"><a href="#5-二叉树的性质和存储结构" class="headerlink" title="5.二叉树的性质和存储结构"></a>5.二叉树的性质和存储结构</h3><h4 id="1-性质"><a href="#1-性质" class="headerlink" title="1.性质"></a>1.性质</h4><h5 id="满二叉树与完全二叉树"><a href="#满二叉树与完全二叉树" class="headerlink" title="满二叉树与完全二叉树"></a>满二叉树与完全二叉树</h5><p><strong>满二叉树</strong>：一颗深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>且有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.049ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2673.8 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(1173.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2173.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点的二叉树就叫满二叉树</p>
<p><strong>完全二叉树：</strong>深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>的具有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个结点的二叉树，当且仅当每一个结点都与深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.179ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 521 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></svg></mjx-container>的<strong>满二叉树</strong>中的<strong>编号</strong>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="3.054ex" height="1.532ex" role="img" focusable="false" viewbox="0 -666 1350 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>的结点一一对应时，称为<strong>完全二叉树</strong>（叶子结点的编号是连续的,<strong>左侧树必须满元素</strong>)</p>
<ul>
<li>叶子只可能分布在层次最大的两层上，</li>
<li>对任意结点，如果其右子树的最大层次为i，则其左子树的最大层次必为i或i+1</li>
</ul>
<p><img src="/posts/18d54854/image-20241031204537868.png" alt="image-20241031204537868"></p>
<h6 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h6><p>​      在二叉树的第i层上至多有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.915ex" height="1.887ex" role="img" focusable="false" viewbox="0 -833.9 1730.6 833.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>个结点</p>
<h6 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h6><p>​     深度为k的二叉树至多有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.049ex" height="2.117ex" role="img" focusable="false" viewbox="0 -853.7 2673.8 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g><g data-mml-node="mo" transform="translate(1173.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2173.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个结点(k&gt;=1)</p>
<h6 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h6><p>​      对任何一个二叉树<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.309ex" height="1.871ex" role="img" focusable="false" viewbox="0 -677 1020.6 827"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></svg></mjx-container>,如果其叶子为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.375ex" role="img" focusable="false" viewbox="0 -442 1036.6 607.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container>,度为2的结点为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.345ex" height="1.339ex" role="img" focusable="false" viewbox="0 -442 1036.6 592"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container>，\则<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="11.604ex" height="1.881ex" role="img" focusable="false" viewbox="0 -666 5129.1 831.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="mo" transform="translate(1314.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2370.1,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3628.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(4629.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<p><img src="/posts/18d54854/image-20241031173605833.png" alt="image-20241031173605833"></p>
<p>​        eg:这里叶子结点7 8 9 10 11 12有6个,度为2的有1 2 3 4 5 有五个</p>
<p>总结点数n  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="20.578ex" height="1.846ex" role="img" focusable="false" viewbox="0 -666 9095.6 816"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(1933.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(2970.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(3542.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(4264.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(5264.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mi" transform="translate(6301.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(6873.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(7595.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(8595.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container> 又 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="16.941ex" height="1.694ex" role="img" focusable="false" viewbox="0 -583 7488.1 748.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(1933.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3192.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(4192.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mo" transform="translate(5451.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(6451.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></g></svg></mjx-container></p>
<p>总边个数B <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.989ex" height="1.731ex" role="img" focusable="false" viewbox="0 -683 4415 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2914.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(3915,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>  =  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="17.041ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 7532.1 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2092.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(3129.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(3701.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(4423.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(5423.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g><g data-mml-node="mi" transform="translate(6460.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(7032.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h6 id="性质4"><a href="#性质4" class="headerlink" title="性质4"></a>性质4</h6><p>具有n个结点的<strong>完全二叉树</strong>的深度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="7.895ex" height="2.239ex" role="img" focusable="false" viewbox="0 -694 3489.7 989.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msubsup" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(510,-295.7) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1989.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2989.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h6 id="性质5"><a href="#性质5" class="headerlink" title="性质5"></a>性质5</h6><p>如果有一颗<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>个结点的<strong>完全二叉树(</strong>深度为 [<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="8.524ex" height="2.366ex" role="img" focusable="false" viewbox="0 -750 3767.7 1045.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msubsup" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(510,-295.7) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1767.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2267.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3267.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>)的结点按层编号(从第1层到第[<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex;" xmlns="http://www.w3.org/2000/svg" width="8.524ex" height="2.366ex" role="img" focusable="false" viewbox="0 -750 3767.7 1045.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="msubsup" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(510,363) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(510,-295.7) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1767.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(2267.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(3267.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>层，每层从左到右)，对<strong>任一结点i</strong>(1&lt;=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>&lt;=n),有</p>
<ol>
<li>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>=1，则结点i是二叉树的根，无双亲;如果i&gt;1，则其<strong>双亲是结点[i /2]。</strong></li>
<li>如果2<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.155ex" height="1.586ex" role="img" focusable="false" viewbox="0 -661 2278.6 701"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(1678.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，则结点i为叶子结点，无左孩子;否则，<br>其<strong>左孩子是结点2i。</strong></li>
<li>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.183ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 4501 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1067.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2067.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2845.2,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mi" transform="translate(3901,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>，则结点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container>无右孩子;否则，其<strong>右孩</strong><br><strong>子是结点2i + 1。</strong></li>
</ol>
<p><strong>总结</strong>: 编号为i，他的父结点为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.043ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1345 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(345,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(845,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></svg></mjx-container>,左结点为2i，右节点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.809ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2567.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1067.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(2067.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></p>
<h4 id="2-存储结构"><a href="#2-存储结构" class="headerlink" title="2.存储结构"></a>2.存储结构</h4><p><img src="/posts/18d54854/image-20241031214118623.png" alt="image-20241031214118623"></p>
<h5 id="1-二叉树的顺序存储结构"><a href="#1-二叉树的顺序存储结构" class="headerlink" title="1.二叉树的顺序存储结构"></a>1.二叉树的顺序存储结构</h5><ul>
<li><p>实现：按满二叉树的结点层次编号，依次存放在二叉树的数据元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXTSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="type">int</span> SqBiTree[MAXTSIZE];</span><br><span class="line">SqBiTree bt;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/18d54854/image-20241102133931076.png" alt="image-20241102133931076"></p>
</li>
<li><p>缺点： <img src="/posts/18d54854/image-20241102134705813.png" alt="image-20241102134705813"></p>
<p>结点间的关系蕴含在其存储位置中，浪费空间，适合满二叉树和完全二叉树</p>
</li>
</ul>
<h5 id="2-二叉树的链式存储结构"><a href="#2-二叉树的链式存储结构" class="headerlink" title="2.二叉树的链式存储结构"></a>2.二叉树的链式存储结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> *<span class="title">lchild</span>,*<span class="title">rchile</span>;</span><span class="comment">//左右孩子</span></span><br><span class="line">}BiNode,*BiTree;</span><br></pre></td></tr></table></figure>
<p><img src="/posts/18d54854/image-20241102135937947.png" alt="image-20241102135937947"></p>
<p>在n个结点的二叉链表中，有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.254ex" height="1.692ex" role="img" focusable="false" viewbox="0 -666 2322.4 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container>个空指针域</p>
<p>必有2n个链域，除根节点外，每个结点有且仅有一个双亲，所有只会有n-1个结点的链域存放指针，指向非空子女结点</p>
<h5 id="3-三叉链表"><a href="#3-三叉链表" class="headerlink" title="3.三叉链表"></a>3.三叉链表</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TriTNode</span>{</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TriTNode</span> *<span class="title">Ichild</span>,*<span class="title">parent</span>,*<span class="title">rchild</span>;</span><span class="comment">//指向双亲结点</span></span><br><span class="line">}TriTNode,*TriTree;</span><br></pre></td></tr></table></figure>
<h4 id="3-遍历二叉树"><a href="#3-遍历二叉树" class="headerlink" title="3.遍历二叉树"></a>3.遍历二叉树</h4><h5 id="1-类型"><a href="#1-类型" class="headerlink" title="1.类型"></a>1.类型</h5><p>先序遍历：根左右</p>
<p>中序遍历：左根右</p>
<p>后续遍历：左右根</p>
<p>​        </p>
]]></content>
      <categories>
        <category>c语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
</search>
